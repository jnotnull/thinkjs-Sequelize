{
    "version": 3,
    "sources": [
        "../../../src/home/model/base.js"
    ],
    "names": [
        "name",
        "config",
        "schema",
        "_model",
        "think",
        "isObject",
        "parseConfig",
        "getConnection",
        "user",
        "password",
        "host",
        "port",
        "sequelize",
        "database",
        "define",
        "timestamps",
        "getModel",
        "connection",
        "freezeTableName",
        "base"
    ],
    "mappings": "AAAA;;;;;;;;;;;;;;;;AACA;;;;;;AAEA;;;;;;AAiBI;;;;;;;;AAZA;;;;AAkBA,oBAAYA,IAAZ,EAA+B;AAAA,YAAbC,MAAa,uEAAJ,EAAI;AAAA;;AAAA,mEAC3B,sBAD2B;;AAAA,cAd/BC,MAc+B,GAdtB,EAcsB;AAAA,cAR/BC,MAQ+B,GARtB,IAQsB;;AAE3B,YAAIC,MAAMC,QAAN,CAAeL,IAAf,CAAJ,EAA0B;AACtBC,qBAASD,IAAT;AACAA,mBAAO,EAAP;AACH;AACD,cAAKA,IAAL,GAAYA,IAAZ;AACA,cAAKC,MAAL,GAAcG,MAAME,WAAN,CAAkBL,MAAlB,CAAd;AAP2B;AAQ9B;;AAED;;;;;;AAtBA;;;;;;qBA0BAM,a,4BAAgB;AACZ,YAAIC,OAAO,EAAX;AACA,YAAI,KAAKP,MAAL,CAAYO,IAAhB,EAAsB;AAClBA,mBAAO,KAAKP,MAAL,CAAYO,IAAZ,GAAmB,GAAnB,GAAyB,KAAKP,MAAL,CAAYQ,QAArC,GAAgD,GAAvD;AACH;AACD,YAAIC,OAAO,KAAKT,MAAL,CAAYS,IAAZ,IAAoB,WAA/B;AACA,YAAIC,OAAO,KAAKV,MAAL,CAAYU,IAAZ,IAAoB,IAA/B;;AAEA,YAAIC,YAAY,qCAAyBJ,IAAzB,GAAgCE,IAAhC,SAAwCC,IAAxC,SAAgD,KAAKV,MAAL,CAAYY,QAA5D,EAAwE;AACtFC,oBAAQ;AACNC,4BAAY,KADN,CACY;AADZ;AAD8E,SAAxE,CAAhB;;AAMA,eAAOH,SAAP;AACH,K;;AAED;;;;;;qBAIAI,Q,uBAAW;AACP,YAAI,CAAC,KAAKb,MAAV,EAAkB;AACd,gBAAIc,aAAa,KAAKV,aAAL,EAAjB;AACA,iBAAKJ,MAAL,GAAcc,WAAWH,MAAX,CAAkB,KAAKd,IAAvB,EAA6B,KAAKE,MAAlC,EAA0C;AACpDgB,iCAAiB;AADmC,aAA1C,CAAd;AAGH;AACD,eAAO,KAAKf,MAAZ;AACH,K;;;EA/DwBC,MAAMe,I",
    "file": "../../../src/home/model/base.js",
    "sourcesContent": [
        "'use strict';\nimport Sequelize from 'Sequelize';\n\n/**\n * relation model\n */\nexport default class extends think.base {\n    \n    /**\n     * schema\n     * @type {Object}\n     */\n    schema = {};\n\n    /**\n     * model instance\n     * @type {[type]}\n     */\n    _model = null;\n\n    /**\n     * constructor\n     * @param  {[type]} name   [description]\n     * @param  {Object} config [description]\n     * @return {[type]}        [description]\n     */\n    constructor(name, config = {}) {\n        super();\n        if (think.isObject(name)) {\n            config = name;\n            name = \"\";\n        }\n        this.name = name;\n        this.config = think.parseConfig(config);\n    }\n\n    /**\n     * 创建连接\n     * @return {[type]} [description]\n     */\n    getConnection() {\n        let user = \"\";\n        if (this.config.user) {\n            user = this.config.user + \":\" + this.config.password + \"@\";\n        }\n        let host = this.config.host || \"127.0.0.1\";\n        let port = this.config.port || 3306;\n\n        var sequelize = new Sequelize(`mysql://${user}${host}:${port}/${this.config.database}`, {\n          define: {\n            timestamps: false // true by default\n          }\n        });\n\n        return sequelize;\n    }\n\n    /**\n     * 获取 Seqelize 里的 Model\n     * @return {[type]} [description]\n     */\n    getModel() {\n        if (!this._model) {\n            let connection = this.getConnection();\n            this._model = connection.define(this.name, this.schema, {\n                freezeTableName: true\n            });\n        }\n        return this._model;\n    }\n}\n"
    ]
}